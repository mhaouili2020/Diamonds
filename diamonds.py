# -*- coding: utf-8 -*-
"""Diamonds.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OT2jobh4kfmqjybZw55vsYWhxXy3aLkd

# **Import Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline 
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder

from google.colab import files
uploaded = files.upload()

diamonds = pd.read_csv("diamonds.csv")
print(diamonds)

df = pd.DataFrame.head(diamonds)
print(df)

"""# **Quick look at data using pandas**"""

diamonds.info()

diamonds.describe()

corr_matrix = diamonds.corr()
corr_matrix["price"].sort_values(ascending = False)

diamonds.dtypes

diamonds["cut"].value_counts()

diamonds["clarity"].value_counts()

diamonds["color"].value_counts()

plt.figure(figsize=(20,10))
sns.heatmap(diamonds.corr(),cmap='PuBu',annot=True)
plt.show()

diamonds.plot(kind="scatter", x="depth", y="price", alpha=0.2, s=diamonds["depth"], label="price", figsize=(10,7), c="price", cmap=plt.get_cmap("jet"), colorbar= True, sharex=False)
plt.show()

diamonds.plot(kind="scatter", x="table", y="price", alpha=0.2, s=diamonds["table"]/100, label="price_per_area", figsize=(10,7), c="price", cmap=plt.get_cmap("jet"), colorbar= True, sharex=False)
plt.show()

from pandas.plotting import scatter_matrix
atteributes = ["carat", "depth", "table", "price"]
scatter_matrix(diamonds[atteributes], figsize = (12, 8))

diamonds.hist(figsize=(15,15))

sns.histplot(diamonds.price)

sns.histplot(diamonds.clarity)

sns.histplot(diamonds.cut)

"""# **Cleaning Data**"""

diamonds.isna().sum()

zeroes_z = diamonds.loc[diamonds['z'] == 0]
print(zeroes_z)

zeroes_y = diamonds.loc[diamonds['y'] == 0]
print(zeroes_y)

diamonds.drop(diamonds.index[diamonds['x'] == 0], inplace = True)
diamonds

zeroes_x = diamonds.loc[diamonds['x'] == 0]
print(zeroes_x)

(diamonds == 0).sum(axis=0)

diamonds.drop(diamonds.index[diamonds['z'] == 0], inplace = True)
diamonds

"""# **Text and Categorical Attributes**"""

# using replace function
diamonds.replace({"Fair": 1, "Good": 2, "Very Good": 3, "Premium": 4, "Ideal": 5}, inplace=True)
diamonds.replace({"J": 1, "I": 2, "H": 3, "G": 4, "F": 5, "E": 6, "D": 7}, inplace=True)
diamonds.replace({"I1": 1, "SI2": 2, "SI1": 3, "VS2": 4, "VS1": 5, "VVS2": 6, "VVS1": 7, "IF": 8}, inplace=True)

diamonds.head(15)



"""# **Adding New features**"""

diamonds['volume'] = diamonds['x']*diamonds['y']*diamonds['z']
diamonds









"""# **Split Data**"""

from sklearn.model_selection import train_test_split
train_set , test_set = train_test_split(diamonds, test_size=0.1, random_state=42)

train_set_x=train_set.drop(["price"],axis=1)
train_set_y=train_set["price"]
test_set_x = test_set.drop(["price"],axis=1)
test_set_y = test_set["price"]



"""# Train Your Model

###LinearRegression
"""

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(train_set_x, train_set_y)

from sklearn.metrics import mean_squared_error
price_predictions = lin_reg.predict(test_set_x)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(lin_reg, train_set_x, train_set_y,scoring="neg_mean_squared_error", cv=10)
rmse_scores = np.sqrt(-scores)
print("Mean ", rmse_scores.mean())

"""Let's Look at the results"""

def display_scores(scores):
  print("Scores", scores)
  print("Mean", scores.mean())
  print("Standard Deviation", scores.std())
display_scores(rmse_scores)

"""###Random Forest Regressor

Import Random Forest Regressor
"""

from sklearn.ensemble import RandomForestRegressor

forest_reg = RandomForestRegressor()
forest_reg.fit(train_set_x, train_set_y)

price_predictions_forest = forest_reg.predict(test_set_x)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(forest_reg, train_set_x, train_set_y,scoring="neg_mean_squared_error", cv=10)
rmse_scores = np.sqrt(-scores)
print("Mean ", rmse_scores.mean())

"""# Fine Your model

Import GridSearchCv
"""

from sklearn.model_selection import GridSearchCV

param_grid = [
              {'n_estimators':[3,10,30], 'max_features':[2,4,6,8]},
              {'bootstrap':[False], 'n_estimators':[3,10], 'max_features':[2,3,4]}
] 
forest_reg = RandomForestRegressor()
grid_search = GridSearchCV(forest_reg, param_grid, cv = 10, scoring='neg_mean_squared_error', return_train_score = True)
grid_search.fit(train_set_x, train_set_y)

